#!/bin/bash

# PostgreSQL HA Cluster Manual Demo Script  
# Interactive step-by-step demonstration

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
MASTER_PORT=5432
REPLICA1_PORT=5433
REPLICA2_PORT=5434
REPLICA3_PORT=5435
DB_NAME="pos_db"
DB_USER="postgres"
DB_PASS="postgres123"
HAPROXY_WRITE_PORT=5439
HAPROXY_READ_PORT=5440

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

header() {
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${NC} $1 ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
}

wait_for_user() {
    echo -e "${YELLOW}Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...${NC}"
    read -r
}

show_cluster_status() {
    header "TR·∫†NG TH√ÅI CLUSTER HI·ªÜN T·∫†I"
    
    echo -e "${CYAN}üìä Docker Containers:${NC}"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(postgres|haproxy|grafana|prometheus)"
    
    echo -e "\n${CYAN}üîó PostgreSQL Connections:${NC}"
    for port in $MASTER_PORT $REPLICA1_PORT $REPLICA2_PORT $REPLICA3_PORT; do
        if PGPASSWORD=$DB_PASS psql -h localhost -p $port -U $DB_USER -d $DB_NAME -c "SELECT 1;" > /dev/null 2>&1; then
            echo -e "  Port $port: ${GREEN}CONNECTED${NC}"
        else
            echo -e "  Port $port: ${RED}DISCONNECTED${NC}"
        fi
    done
    
    echo -e "\n${CYAN}üìà Product Count per Node:${NC}"
    for port in $MASTER_PORT $REPLICA1_PORT $REPLICA2_PORT $REPLICA3_PORT; do
        local count=$(PGPASSWORD=$DB_PASS psql -h localhost -p $port -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM pos_product;" 2>/dev/null | xargs || echo "N/A")
        local role=$(PGPASSWORD=$DB_PASS psql -h localhost -p $port -U $DB_USER -d $DB_NAME -t -c "SELECT CASE WHEN pg_is_in_recovery() THEN 'REPLICA' ELSE 'MASTER' END;" 2>/dev/null | xargs || echo "N/A")
        echo -e "  Port $port ($role): $count products"
    done
}

demo_step_1() {
    header "B∆Ø·ªöC 1: KH·ªûI T·∫†O CLUSTER"
    
    info "Demonstration s·∫Ω kh·ªüi ƒë·ªông PostgreSQL HA cluster v·ªõi:"
    echo "  ‚Ä¢ 1 Master PostgreSQL (port 5432)"
    echo "  ‚Ä¢ 3 Replica PostgreSQL (ports 5433, 5434, 5435)"
    echo "  ‚Ä¢ HAProxy Load Balancer (ports 5439 write, 5440 read)"
    echo "  ‚Ä¢ Grafana Dashboard (port 3000)"
    echo "  ‚Ä¢ Prometheus Monitoring (port 9090)"
    
    wait_for_user
    
    log "Kh·ªüi ƒë·ªông cluster v·ªõi docker-compose..."
    docker-compose -f docker-compose-simple-ha.yml up -d
    
    log "ƒêang ch·ªù t·∫•t c·∫£ services s·∫µn s√†ng (c√≥ th·ªÉ m·∫•t v√†i ph√∫t)..."
    sleep 30
    
    show_cluster_status
}

demo_step_2() {
    header "B∆Ø·ªöC 2: KI·ªÇM TRA STREAMING REPLICATION"
    
    info "B√¢y gi·ªù ch√∫ng ta s·∫Ω test streaming replication b·∫±ng c√°ch:"
    echo "  1. Ch√®n m·ªôt s·∫£n ph·∫©m m·ªõi v√†o Master"
    echo "  2. X√°c minh d·ªØ li·ªáu ƒë∆∞·ª£c replicate ngay l·∫≠p t·ª©c ƒë·∫øn t·∫•t c·∫£ Replicas"
    
    wait_for_user
    
    # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªán t·∫°i
    log "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªán t·∫°i:"
    show_cluster_status
    
    # Ch√®n s·∫£n ph·∫©m m·ªõi
    local new_product_name="Demo Product $(date +%s)"
    local new_sku="DEMO-$(date +%s)"
    
    log "Ch√®n s·∫£n ph·∫©m m·ªõi: $new_product_name"
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "
        INSERT INTO pos_product (name, description, price, category_id, sku, is_available, created_by) 
        VALUES ('$new_product_name', 'Demo replication product', 125000, 1, '$new_sku', true, 1);
    "
    
    success "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ch√®n v√†o Master!"
    
    log "Ch·ªù 3 gi√¢y ƒë·ªÉ replication ho√†n t·∫•t..."
    sleep 3
    
    log "Ki·ªÉm tra replication tr√™n t·∫•t c·∫£ nodes:"
    show_cluster_status
    
    info "‚ú® L∆∞u √Ω: T·∫•t c·∫£ replicas n√™n c√≥ c√πng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m nh∆∞ Master"
}

demo_step_3() {
    header "B∆Ø·ªöC 3: KI·ªÇM TRA LOAD BALANCING"
    
    info "B√¢y gi·ªù ch√∫ng ta s·∫Ω test HAProxy load balancing:"
    echo "  ‚Ä¢ Write operations qua port 5439 (ch·ªâ Master)"
    echo "  ‚Ä¢ Read operations qua port 5440 (load balanced replicas)"
    
    wait_for_user
    
    # Test write operations
    log "Testing write operations qua HAProxy (port $HAPROXY_WRITE_PORT)..."
    local haproxy_sku="HAPROXY-$(date +%s)"
    
    PGPASSWORD=$DB_PASS psql -h localhost -p $HAPROXY_WRITE_PORT -U $DB_USER -d $DB_NAME -c "
        INSERT INTO pos_product (name, description, price, category_id, sku, is_available, created_by) 
        VALUES ('HAProxy Write Test', 'Inserted via HAProxy write port', 135000, 1, '$haproxy_sku', true, 1);
    "
    
    success "Write operation qua HAProxy th√†nh c√¥ng!"
    
    # Test read operations
    log "Testing read operations qua HAProxy (port $HAPROXY_READ_PORT)..."
    for i in {1..3}; do
        local count=$(PGPASSWORD=$DB_PASS psql -h localhost -p $HAPROXY_READ_PORT -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM pos_product;" | xargs)
        log "Read test $i qua HAProxy: $count products"
        sleep 1
    done
    
    success "Load balancing ƒëang ho·∫°t ƒë·ªông t·ªët!"
    
    info "üåê Truy c·∫≠p HAProxy Stats: http://localhost:8080/stats"
}

demo_step_4() {
    header "B∆Ø·ªöC 4: M√î PH·ªéNG FAILOVER"
    
    warning "‚ö†Ô∏è  C·∫¢NH B√ÅO: B∆∞·ªõc n√†y s·∫Ω m√¥ ph·ªèng Master failure!"
    info "ƒêi·ªÅu n√†y s·∫Ω:"
    echo "  1. D·ª´ng Master PostgreSQL container"
    echo "  2. Ki·ªÉm tra cluster reaction"
    echo "  3. Kh√¥i ph·ª•c Master"
    
    echo -e "${RED}B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/n):${NC}"
    read -r confirm
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        warning "B·ªè qua failover test"
        return
    fi
    
    log "Tr·∫°ng th√°i tr∆∞·ªõc khi failover:"
    show_cluster_status
    
    warning "D·ª´ng Master container..."
    docker stop postgres-master
    
    log "Ch·ªù 10 gi√¢y ƒë·ªÉ cluster ph·∫£n ·ª©ng..."
    sleep 10
    
    log "Tr·∫°ng th√°i sau khi Master down:"
    show_cluster_status
    
    warning "Kh√¥i ph·ª•c Master container..."
    docker start postgres-master
    
    log "Ch·ªù Master kh·ªüi ƒë·ªông l·∫°i..."
    sleep 20
    
    log "Tr·∫°ng th√°i sau khi kh√¥i ph·ª•c:"
    show_cluster_status
    
    success "Failover simulation ho√†n t·∫•t!"
}

demo_step_5() {
    header "B∆Ø·ªöC 5: MONITORING V√Ä GRAFANA"
    
    info "Ki·ªÉm tra monitoring functions v√† Grafana dashboard:"
    
    log "Testing monitoring functions..."
    
    echo -e "\n${CYAN}üìä Cluster Status Function:${NC}"
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "SELECT * FROM get_cluster_status();"
    
    echo -e "\n${CYAN}üîÑ Replication Status Function:${NC}"
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "SELECT * FROM get_replication_status();"
    
    echo -e "\n${CYAN}üëë Master Election Status Function:${NC}"
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "SELECT * FROM get_master_election_status();"
    
    echo -e "\n${CYAN}üìà Product Count Realtime Function:${NC}"
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "SELECT * FROM get_product_count_realtime();"
    
    info "üé® Access Grafana Dashboard: http://localhost:3000"
    info "   Username: admin, Password: admin123"
    info "üìä Access Prometheus: http://localhost:9090"
    info "üìà Access HAProxy Stats: http://localhost:8080/stats"
    
    wait_for_user
}

demo_step_6() {
    header "B∆Ø·ªöC 6: PERFORMANCE TEST"
    
    info "Ch·∫°y performance test v·ªõi concurrent operations:"
    
    wait_for_user
    
    log "Ch·∫°y 10 concurrent insert operations..."
    local start_time=$(date +%s)
    
    for i in {1..10}; do
        {
            PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "
                INSERT INTO pos_product (name, description, price, category_id, sku, is_available, created_by) 
                VALUES ('Perf Test $i', 'Concurrent performance test $i', $((60000 + i)), 1, 'PERF-$i-$(date +%s)', true, 1);
            " > /dev/null 2>&1
        } &
    done
    
    wait
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    success "Performance test ho√†n t·∫•t trong $duration gi√¢y!"
    
    log "Tr·∫°ng th√°i cluster sau performance test:"
    show_cluster_status
}

main() {
    clear
    header "POSTGRESQL HA CLUSTER INTERACTIVE DEMO"
    
    info "Ch√†o m·ª´ng ƒë·∫øn v·ªõi PostgreSQL HA Cluster Interactive Demo!"
    echo ""
    echo "Demo n√†y s·∫Ω h∆∞·ªõng d·∫´n b·∫°n qua t·∫•t c·∫£ t√≠nh nƒÉng ch√≠nh:"
    echo "  ‚Ä¢ Streaming Replication"
    echo "  ‚Ä¢ Load Balancing v·ªõi HAProxy"
    echo "  ‚Ä¢ Failover Simulation"
    echo "  ‚Ä¢ Auto Recovery"
    echo "  ‚Ä¢ Monitoring v·ªõi Grafana"
    echo "  ‚Ä¢ Performance Testing"
    echo ""
    
    wait_for_user
    
    demo_step_1
    demo_step_2  
    demo_step_3
    demo_step_4
    demo_step_5
    demo_step_6
    
    header "DEMO HO√ÄN T·∫§T!"
    
    success "üéâ PostgreSQL HA Cluster Demo ƒë√£ ho√†n th√†nh th√†nh c√¥ng!"
    
    info "üìã T√≥m t·∫Øt nh·ªØng g√¨ ch√∫ng ta ƒë√£ l√†m:"
    echo "  ‚úÖ Kh·ªüi ƒë·ªông HA cluster v·ªõi 1 master + 3 replicas"
    echo "  ‚úÖ Ki·ªÉm tra streaming replication"
    echo "  ‚úÖ Test load balancing v·ªõi HAProxy"
    echo "  ‚úÖ M√¥ ph·ªèng failover v√† recovery"
    echo "  ‚úÖ X√°c minh monitoring functions"
    echo "  ‚úÖ Ch·∫°y performance test"
    
    info "üîó C√°c URLs quan tr·ªçng:"
    echo "  ‚Ä¢ Grafana Dashboard: http://localhost:3000 (admin/admin123)"
    echo "  ‚Ä¢ Prometheus: http://localhost:9090"
    echo "  ‚Ä¢ HAProxy Stats: http://localhost:8080/stats"
    
    echo ""
    log "Cluster v·∫´n ƒëang ch·∫°y. S·ª≠ d·ª•ng 'docker-compose -f docker-compose-simple-ha.yml down' ƒë·ªÉ d·ª´ng."
}

# Execute main function
main "$@" 