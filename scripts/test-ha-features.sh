#!/bin/bash

# PostgreSQL HA Cluster Comprehensive Testing Script
# Th·ª±c hi·ªán automated testing cho t·∫•t c·∫£ t√≠nh nƒÉng HA

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
MASTER_PORT=5432
REPLICA1_PORT=5433
REPLICA2_PORT=5434
REPLICA3_PORT=5435
DB_NAME="pos_db"
DB_USER="postgres"
DB_PASS="postgres123"
HAPROXY_WRITE_PORT=5439
HAPROXY_READ_PORT=5440
TEST_TIMEOUT=30

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

wait_for_postgres() {
    local host=$1
    local port=$2
    local max_attempts=30
    local attempt=1
    
    log "ƒêang ch·ªù PostgreSQL t·∫°i $host:$port..."
    while [ $attempt -le $max_attempts ]; do
        if PGPASSWORD=$DB_PASS psql -h $host -p $port -U $DB_USER -d $DB_NAME -c "SELECT 1;" > /dev/null 2>&1; then
            success "PostgreSQL t·∫°i $host:$port ƒë√£ s·∫µn s√†ng"
            return 0
        fi
        sleep 2
        ((attempt++))
    done
    error "Timeout ch·ªù PostgreSQL t·∫°i $host:$port"
    return 1
}

# Test 1: Streaming Replication Test
test_streaming_replication() {
    log "üîÑ Test 1: Ki·ªÉm tra Streaming Replication"
    
    # Insert test data v√†o master
    local test_product_name="Test Product $(date +%s)"
    local test_sku="TEST-$(date +%s)"
    
    log "Ch√®n s·∫£n ph·∫©m test v√†o master..."
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "
        INSERT INTO pos_product (name, description, price, category_id, sku, is_available, created_by) 
        VALUES ('$test_product_name', 'Test replication product', 99999, 1, '$test_sku', true, 1);
    " > /dev/null

    # Get product count t·ª´ master
    local master_count=$(PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM pos_product;" | xargs)
    log "S·ªë s·∫£n ph·∫©m tr√™n Master: $master_count"
    
    # Wait v√† check tr√™n replicas
    sleep 3
    
    local replicas=("$REPLICA1_PORT" "$REPLICA2_PORT" "$REPLICA3_PORT")
    local replication_success=true
    
    for replica_port in "${replicas[@]}"; do
        local replica_count=$(PGPASSWORD=$DB_PASS psql -h localhost -p $replica_port -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM pos_product;" | xargs)
        log "S·ªë s·∫£n ph·∫©m tr√™n Replica (port $replica_port): $replica_count"
        
        if [ "$master_count" != "$replica_count" ]; then
            error "Replication lag ph√°t hi·ªán! Master: $master_count, Replica: $replica_count"
            replication_success=false
        fi
    done
    
    if [ "$replication_success" = true ]; then
        success "Streaming Replication Test PASSED ‚úÖ"
    else
        error "Streaming Replication Test FAILED ‚ùå"
        return 1
    fi
}

# Test 2: Load Balancing Test  
test_load_balancing() {
    log "‚öñÔ∏è  Test 2: Ki·ªÉm tra Load Balancing"
    
    # Test write operations qua HAProxy
    log "Testing write operations qua HAProxy (port $HAPROXY_WRITE_PORT)..."
    local write_test_sku="WRITE-TEST-$(date +%s)"
    
    if PGPASSWORD=$DB_PASS psql -h localhost -p $HAPROXY_WRITE_PORT -U $DB_USER -d $DB_NAME -c "
        INSERT INTO pos_product (name, description, price, category_id, sku, is_available, created_by) 
        VALUES ('HAProxy Write Test', 'Load balancer write test', 88888, 1, '$write_test_sku', true, 1);
    " > /dev/null 2>&1; then
        success "Write operations qua HAProxy th√†nh c√¥ng"
    else
        error "Write operations qua HAProxy th·∫•t b·∫°i"
        return 1
    fi
    
    # Test read operations qua HAProxy
    log "Testing read operations qua HAProxy (port $HAPROXY_READ_PORT)..."
    for i in {1..5}; do
        local read_result=$(PGPASSWORD=$DB_PASS psql -h localhost -p $HAPROXY_READ_PORT -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM pos_product;" | xargs)
        log "Read test $i: $read_result products"
        if [ -z "$read_result" ]; then
            error "Read operations qua HAProxy th·∫•t b·∫°i"
            return 1
        fi
    done
    
    success "Load Balancing Test PASSED ‚úÖ"
}

# Test 3: Failover Simulation Test
test_failover_simulation() {
    log "üí• Test 3: M√¥ ph·ªèng Failover (D·ª´ng Master)"
    
    warning "D·ª´ng PostgreSQL Master container..."
    docker stop postgres-master || true
    
    sleep 10
    
    # Th·ª≠ promote m·ªôt replica th√†nh master (manual promotion cho demo)
    log "Th·ª≠ thƒÉng c·∫•p Replica 1 th√†nh Master..."
    
    # Stop replica 1 v√† restart nh∆∞ master
    docker stop postgres-replica1 || true
    sleep 5
    
    # Restart replica1 v·ªõi config master (simplified approach)
    log "Kh·ªüi ƒë·ªông l·∫°i Replica 1 v·ªõi role Master..."
    docker start postgres-replica1 || true
    
    sleep 10
    
    # Test connectivity
    if wait_for_postgres localhost $REPLICA1_PORT; then
        # Test write operations tr√™n promoted replica
        local failover_sku="FAILOVER-TEST-$(date +%s)"
        if PGPASSWORD=$DB_PASS psql -h localhost -p $REPLICA1_PORT -U $DB_USER -d $DB_NAME -c "
            INSERT INTO pos_product (name, description, price, category_id, sku, is_available, created_by) 
            VALUES ('Failover Test Product', 'After failover test', 77777, 1, '$failover_sku', true, 1);
        " > /dev/null 2>&1; then
            success "Write operations tr√™n promoted replica th√†nh c√¥ng"
        else
            warning "Write operations tr√™n promoted replica th·∫•t b·∫°i (c√≥ th·ªÉ v·∫´n ·ªü read-only mode)"
        fi
    fi
    
    success "Failover Simulation Test COMPLETED ‚úÖ"
    
    # Restart master for next tests
    log "Kh·ªüi ƒë·ªông l·∫°i Master container..."
    docker start postgres-master || true
    sleep 15
    wait_for_postgres localhost $MASTER_PORT || true
}

# Test 4: Auto-Recovery Test
test_auto_recovery() {
    log "üîÑ Test 4: Ki·ªÉm tra Auto-Recovery"
    
    # Ensure all containers are running
    log "ƒê·∫£m b·∫£o t·∫•t c·∫£ containers ƒëang ch·∫°y..."
    docker start postgres-master postgres-replica1 postgres-replica2 postgres-replica3 || true
    sleep 10
    
    # Wait for all nodes
    wait_for_postgres localhost $MASTER_PORT || true
    wait_for_postgres localhost $REPLICA1_PORT || true
    wait_for_postgres localhost $REPLICA2_PORT || true
    wait_for_postgres localhost $REPLICA3_PORT || true
    
    # Test sync after recovery
    local recovery_sku="RECOVERY-TEST-$(date +%s)"
    log "Ch√®n d·ªØ li·ªáu test recovery..."
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "
        INSERT INTO pos_product (name, description, price, category_id, sku, is_available, created_by) 
        VALUES ('Recovery Test Product', 'After recovery test', 66666, 1, '$recovery_sku', true, 1);
    " > /dev/null
    
    sleep 5
    
    # Check sync across all nodes
    local master_count=$(PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM pos_product;" | xargs)
    log "Master product count sau recovery: $master_count"
    
    local recovery_success=true
    for replica_port in "$REPLICA1_PORT" "$REPLICA2_PORT" "$REPLICA3_PORT"; do
        local replica_count=$(PGPASSWORD=$DB_PASS psql -h localhost -p $replica_port -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM pos_product;" 2>/dev/null | xargs || echo "0")
        log "Replica $replica_port count sau recovery: $replica_count"
        if [ "$master_count" != "$replica_count" ] && [ "$replica_count" != "0" ]; then
            warning "Recovery sync ch∆∞a ho√†n t·∫•t cho replica $replica_port"
            recovery_success=false
        fi
    done
    
    if [ "$recovery_success" = true ]; then
        success "Auto-Recovery Test PASSED ‚úÖ"
    else
        warning "Auto-Recovery Test PARTIALLY COMPLETED ‚ö†Ô∏è"
    fi
}

# Test 5: Monitoring Functions Test
test_monitoring_functions() {
    log "üìä Test 5: Ki·ªÉm tra Monitoring Functions"
    
    log "Testing get_cluster_status() function..."
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "SELECT * FROM get_cluster_status();" || true
    
    log "Testing get_replication_status() function..."
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "SELECT * FROM get_replication_status();" || true
    
    log "Testing get_master_election_status() function..."
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "SELECT * FROM get_master_election_status();" || true
    
    log "Testing get_product_count_realtime() function..."
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "SELECT * FROM get_product_count_realtime();" || true
    
    success "Monitoring Functions Test COMPLETED ‚úÖ"
}

# Test 6: Performance Test
test_performance() {
    log "üöÄ Test 6: Performance Test"
    
    log "Ch·∫°y concurrent insert operations..."
    for i in {1..10}; do
        {
            PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "
                INSERT INTO pos_product (name, description, price, category_id, sku, is_available, created_by) 
                VALUES ('Perf Test $i', 'Performance test product $i', $((50000 + i)), 1, 'PERF-$i-$(date +%s)', true, 1);
            " > /dev/null 2>&1
        } &
    done
    
    wait
    success "Performance Test COMPLETED ‚úÖ"
}

# Main execution
main() {
    log "üöÄ B·∫Øt ƒë·∫ßu PostgreSQL HA Cluster Comprehensive Testing"
    log "=================================================="
    
    # Wait for all services to be ready
    log "Ch·ªù t·∫•t c·∫£ services s·∫µn s√†ng..."
    wait_for_postgres localhost $MASTER_PORT
    wait_for_postgres localhost $REPLICA1_PORT  
    wait_for_postgres localhost $REPLICA2_PORT
    wait_for_postgres localhost $REPLICA3_PORT
    
    # Run all tests
    test_streaming_replication
    test_load_balancing
    test_failover_simulation
    test_auto_recovery
    test_monitoring_functions
    test_performance
    
    log "=================================================="
    success "üéâ T·∫•t c·∫£ tests ƒë√£ ho√†n th√†nh!"
    
    # Final cluster status
    log "üìä Tr·∫°ng th√°i cluster cu·ªëi c√πng:"
    PGPASSWORD=$DB_PASS psql -h localhost -p $MASTER_PORT -U $DB_USER -d $DB_NAME -c "SELECT * FROM get_cluster_status();" || true
}

# Trap for cleanup
cleanup() {
    log "Cleaning up..."
    # Ensure all containers are running for normal operation
    docker start postgres-master postgres-replica1 postgres-replica2 postgres-replica3 || true
}

trap cleanup EXIT

# Execute main function
main "$@" 